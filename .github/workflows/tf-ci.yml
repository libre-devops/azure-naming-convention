name: 'Terraform CI'

on:
  push:
    branches:
    - main
    - dev
    - mvp
    - feature*
  pull_request:
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform CI'
    runs-on: ubuntu-latest
    environment: tst
    env:
      PIPELINE_PLAN: "pipeline.plan"
      TERRAFORM_PATH: "terraform"
      SHORTHAND_PROJECT_NAME: "lbdo"
      SHORTHAND_ENVIRONMENT: "tst"
      SHORTHAND_LOCATION: "euw"
      TERRAFORM_COMPLIANCE_POLICY: "https://github.com/libre-devops/azure-naming-convention.git//?ref=main"
      TERRAFORM_STATE_NAME: "$${ env.SHORTHAND_PROJECT_NAME }}-${{ env.SHORTHAND_ENVIRONMENT }}-az-naming.terraform.tfstate"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - uses: hashicorp/setup-terraform@v1.2.1
      - uses: actions/checkout@v2

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init & Plan
        working-directory: ./terraform
        run: |

          rm -rf .terraform && \
          mkdir -p .terraform && \

          terraform init \
          -backend-config="storage_account_name=${TF_VAR_AZURE_BACKEND_SA_NAME}" \
          -backend-config="access_key=${TF_VAR_AZURE_BACKEND_SA_KEY}" \
          -backend-config="container_name=${TF_VAR_AZURE_BACKEND_SA_CONTAINER_NAME}" \
          -backend-config="key=${TERRAFORM_STATE_NAME}" && \

          printf '%s' "${TF_VAR_env}" > .terraform/environment && \

          terraform workspace select "${TF_VAR_env}" && \

          terraform plan -out ${PIPELINE_PLAN} && \

          terraform validate

        env:
          TF_VAR_short: ${{ env.SHORTHAND_PROJECT_NAME }}
          TF_VAR_env: ${{ env.SHORTHAND_ENVIRONMENT }}
          TF_VAR_loc: ${{ env.SHORTHAND_LOCATION }}
          TERRAFORM_STATE_NAME: ${{ env.TERRAFORM_STATE_NAME }}

          TF_VAR_AZURE_BACKEND_SA_NAME: ${{ secrets.SPOKESANAME }}
          TF_VAR_AZURE_BACKEND_SA_KEY: ${{ secrets.SPOKESAPRIMARYKEY }}
          TF_VAR_AZURE_BACKEND_SA_CONTAINER_NAME: ${{ secrets.SPOKESABLOBCONTAINERNAME }}

          ARM_CLIENT_ID: ${{ secrets.SPOKESVPCLIENTID }}
          ARM_CLIENT_SECRET: ${{ secrets.SPOKESVPCLIENTSECRET }}
          ARM_TENANT_ID: ${{ secrets.SPOKESVPTENANTID}}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SPOKESUBID }}

          TF_VAR_AZURE_CLIENT_ID: ${{ secrets.SPOKESVPCLIENTID }}
          TF_VAR_AZURE_CLIENT_SECRET: ${{ secrets.SPOKESVPCLIENTSECRET }}
          TF_VAR_AZURE_TENANT_ID: ${{ secrets.SPOKESVPTENANTID}}
          TF_VAR_AZURE_SUBSCRIPTION_ID: ${{ secrets.SPOKESUBID }}

      - name: Checkov GitHub Action
        uses: bridgecrewio/checkov-action@v12.641.0
        with:
          directory: ./terraform
          skip_check:

      - name: terraform-compliance
        uses: terraform-compliance/github_action@0.3.0
        with:
          plan: ${{ env.TERRAFORM_PATH}}/${{ env.PIPELINE_PLAN}}
          features: ${{ env.TERRAFORM_COMPLIANCE_POLICY}}
